{
  "hash": "28ee995b5bb460cf9718a13a0606a6ac",
  "result": {
    "markdown": "---\ntitle: \"How to interoperate between Singulariy and Docker in HPC environments\"\nauthor: \"Onurcan Bektas\"\ndate: \"2024-12-01\"\ncategories: [hpc, howto, singularity, docker]\ndraft: false \nformat: \n  html:\n    embed-resources: true\n    toc: true\n    toc-depth: 3\n    toc-expand: 3\n    toc-location: left\n    page-layout: article\n  pdf:\n    toc: true\n    toc-depth: 3\n    toc-expand: 3\n    number-sections: true\n    colorlinks: true\nexecute:\n    eval: false\n    code-fold: show \n    code-tools: true\n    code-summary: \"Show the code\"\n    code-overflow: wrap\nengine: knitr\n---\n\n\n\n# Abstract\n\nThe demand for computational power to carry out scientific research has increased dramatically in the last decade.\nTo deal with this demand, high-performance computing (HPC) clusters has been established across the world as a collaboration between research instituations and universities.\nHPC clusters a bunch of inter-connected computers managed by a workload manager, such as SLURM, where individual users can request resources to carry out large-scale computations \nand these resources can be optimally allocated by the workload manager to maximise the utilisation of the available resources.\nBecause these clusters are shared by possibly tausends of users, only few administrators are allowed to install software to these computers due to security reasons.\nHowever, the limited permissions the individual users have might restrict them from installing the necessary software that they might need to carry out their research.\nSingularity and docker solves this issue by allowing individual users to create and run virtual software environmenments where they can install any software they like.\nIn this blog post, I'll show you how to create a docker container and use it with singularity (a.k.a. apptainer).\n\n# Step 1: Create a dockerfile\nTo create a docker container, we first need to create what is called a *dockerfile*.\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n\ntouch my.dockerfile\nvi my.dockerfile\n\n```\n:::\n\n\n\nInside the `my.dockerfile`, we need to list instructions for Docker to create a docker container.\nThe format a typically docker container that I use looks as follows:\n\n\n\n::: {.cell}\n\n```{.dockerfile .cell-code}\n# Dockerfile for Seurat 4.3.0\nFROM rocker/r-ver:4.2.0\n# Install Seurat's system dependencies\nRUN apt-get update\nRUN apt-get install -y \\\n    libhdf5-dev \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libpng-dev \\\n    libboost-all-dev \\\n    libxml2-dev \\\n    openjdk-8-jdk \\\n    python3-dev \\\n    python3-pip \\\n    wget \\\n    git \\\n    libfftw3-dev \\\n    libgsl-dev \\\n    pkg-config\nRUN apt-get install -y llvm-10\n# Install system library for rgeos\nRUN apt-get install -y libgeos-dev\n# Install UMAP\nRUN LLVM_CONFIG=/usr/lib/llvm-10/bin/llvm-config pip3 install llvmlite\nRUN pip3 install numpy\nRUN pip3 install umap-learn\nRUN git clone --branch v1.2.1 https://github.com/KlugerLab/FIt-SNE.git\nRUN g++ -std=c++11 -O3 FIt-SNE/src/sptree.cpp FIt-SNE/src/tsne.cpp FIt-SNE/src/nbodyfft.cpp  -o bin/fast_tsne -pthread -lfftw3 -lm\n# Install bioconductor dependencies & suggests\nRUN R --no-echo --no-restore --no-save -e \"install.packages('BiocManager')\"\n```\n:::\n\n\n\nIn each line, the capitalised words are instructions for docker to tell what to do with the code following those words.\nFor example, *FROM* tells docker that it should use the docker container located at [hub.docker.com/layers/rocker/r-ver/4.2.0](https://hub.docker.com/layers/rocker/r-ver/4.2.0/images/sha256-53e27eaf50320246234dc960c19143161797b721b67d69f4fd4c2a5157b23b54?context=explore) as a *base* image and build the container on top of that image.\nThis is typically used to set the operating system of the docker container, e.g. ubuntu, fedora, etc..\nIn this particular case, I'm using official docker container of **R** programming language version 4.2.0 as the base so that I don't have to install I myself.\n\nThe lines folling the first line tells which commands to execute to set up the container.\nFor example, in the second line, I'm first updating the virtual operating system of the docker container, \nthen in the third line I'm installing some libraries to the operating system that will be needed for the R packages that I use.\nThe details of how to set up a docker container is beyond the scope of this blog post, so I'll skip that for the moment.\n\nOnce you finish setting up the dockerfile, now we are ready to actually build the container and *upload* to somewhere so that we can access it whenever we want.\n\n# Step 2: Create the container and push it to dockerhub\nAssuming that you are creating the docker container in a non-linux environment, we will tell docker that the container will be used in the a linux environment while we create the container.\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndocker build -t mycontainer:latest . -f my.dockerfile  --platform linux/x86_64 2>&1 | tee build.log\n```\n:::\n\n\n\nHere, `mycontainer:latest` gives the container a name and a tag to easily identify it.\nThe tag is like a version of that container.\nThe dot `.` following that tells docker that the docker file `-f my.dockerfile` is located at the current location where this command is executed.\nThe parameter `--platform linux/x86_64` tells docker that the container should be compatible with a linux host.\nOnce you execute the above command, it can take from minutes to hours to create the container, depending on what you asked the docker to install to your container.\n\nOnce the creation of the container is complete, we need to push it a dockerhub as a repository.\nFirst create an account at [dockerhub](https://hub.docker.com/).\nThen create a reposity at dockerhub in the website.\nYou will push the container you created in your computer to this repo you created in dockerhub.\nThen from your terminal, log into your account \n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndocker login --username <dockerhub username>\n```\n:::\n\n\n\nNow you first need to tag the docker container in your computer to the repo in the dockerhub.\nList all docker images and copy `IMAGE ID` of that container.\nIt should be a 12 character alphanumeric string, something like `76ad0cae35c3`.\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndocker image ls\n```\n:::\n\n\n\nOnce you find the `IMAGE ID` of your container, we tag it to the repo as\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndocker tag <IMAGE ID> <dockerhub username>/<repo name>\n```\n:::\n\n\n\nNow we are ready push the container that is still stored in your computer to the repo at `<dockerhub username>/<repo name>`.\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndocker push <dockerhub username>/<repo name>\n```\n:::\n\n\n\nIt might take some time for the push to finish, if this is your first time creating this container and it is a large container.\n\n# Step 3: Use the docker container with Singulariy/Apptainer\nHaving created the docker container and stored in the dockerhub, we are ready to use with singularity.\nLog into the HPC cluster and make sure that the singularity/apptainer is installed already.\nWe first make sure that the cache directories are created - otherwise singularity will complain.\nThen we can directly run the docker container with singularity in the following way:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmkdir $SINGULARITY_TMPDIR \nmkdir $APPTAINER_CACHEDIR\nsingularity run  docker://<dockerhub username>/<repo name>:latest\n```\n:::\n\n\n\nHere, the word `docker` before `<dockerhub username>/<repo name>:latest` tells singularity to search for the repo in the dockerhub.\nWith this, singularity download the docker container at `<dockerhub username>/<repo name>:latest` and run it.\nOnce it is done, you will be inside the container and start using the software that you have installed in that container.\n\nHowever, typically, when we are running the docker container, we also would like to access to the data is that in the host environment.\nAs a result, we need to *bind* the some of the directories in the host to the a directory in the virtual operating system.\n*Binding* simply means that you make a directory in the host operating system accessible from within the container.\nTo accmplish this we pass `--bind` parameter.\nThe path before `:` indicates directory in the host, and the path after `:` indicates the path inside the container.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingularity run --bind <host path>:<container path> docker://<dockerhub username>/<repo name>:latest\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}