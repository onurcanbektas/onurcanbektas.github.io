<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Home</title>
<link>https://onurcanbektas.quarto.pub/home/index.html</link>
<atom:link href="https://onurcanbektas.quarto.pub/home/index.xml" rel="self" type="application/rss+xml"/>
<description>Personal webspage</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Sat, 30 Nov 2024 23:00:00 GMT</lastBuildDate>
<item>
  <title>How to create a Docker container and use with Singularity/Apptainer in HPC environments</title>
  <dc:creator>Onurcan Bektas</dc:creator>
  <link>https://onurcanbektas.quarto.pub/home/posts/241201I1/index.html</link>
  <description><![CDATA[ 




<section id="abstract" class="level1">
<h1>Abstract</h1>
<p>The demand for computational power for scientific research has increased dramatically in the last decade. To deal with this demand, high-performance computing (HPC) clusters have been established as a collaboration between multiple research institutions and universities, providing thousands of researchers with a large pool of shared computing resources. Simply put, HPC clusters are a bunch of interconnected computers where individual users can carry out large-scale computations. Due to security reasons, only a few administrators can install software on these computers. As a result, individual users are constrained to use only the software provided by the administrators, limiting the use-case of HPC clusters. Singularity and docker solve this issue by allowing individual users to create and run custom virtual software environments where they can install any software they like. In this blog post, Iâ€™ll show you how to create a docker container and use it with singularity (a.k.a. apptainer).</p>
</section>
<section id="step-1-create-a-dockerfile" class="level1">
<h1>Step 1: Create a dockerfile</h1>
<p>To create a docker container, we first need to create what is called a <em>dockerfile</em>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> my.dockerfile</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vi</span> my.dockerfile</span></code></pre></div>
</div>
<p>Inside the <code>my.dockerfile</code>, we need to list instructions for Docker to create a docker container. The format of a typical docker container that I use looks as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dockerfile for Seurat 4.3.0</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> rocker/r-ver:4.2.0</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install Seurat's system dependencies</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update</span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-6">    libhdf5-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-7">    libcurl4-openssl-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-8">    libssl-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-9">    libpng-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-10">    libboost-all-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-11">    libxml2-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-12">    openjdk-8-jdk <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-13">    python3-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-14">    python3-pip <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-15">    wget <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-16">    git <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-17">    libfftw3-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-18">    libgsl-dev <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-19">    pkg-config</span>
<span id="cb2-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> llvm-10</span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install system library for rgeos</span></span>
<span id="cb2-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> libgeos-dev</span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install UMAP</span></span>
<span id="cb2-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">LLVM_CONFIG</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/usr/lib/llvm-10/bin/llvm-config <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip3</span> install llvmlite</span>
<span id="cb2-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip3</span> install numpy</span>
<span id="cb2-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip3</span> install umap-learn</span>
<span id="cb2-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> clone <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--branch</span> v1.2.1 https://github.com/KlugerLab/FIt-SNE.git</span>
<span id="cb2-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">g++</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-std</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>c++11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-O3</span> FIt-SNE/src/sptree.cpp FIt-SNE/src/tsne.cpp FIt-SNE/src/nbodyfft.cpp  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> bin/fast_tsne <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-pthread</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-lfftw3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-lm</span></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install bioconductor dependencies &amp; suggests</span></span>
<span id="cb2-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">R</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-restore</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-save</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"install.packages('BiocManager')"</span></span></code></pre></div>
</div>
<p>In each line, the capitalised words are instructions for docker to tell what to do with the code following those words. For example, <em>FROM</em> tells docker that it should use the docker container located at <a href="https://hub.docker.com/layers/rocker/r-ver/4.2.0/images/sha256-53e27eaf50320246234dc960c19143161797b721b67d69f4fd4c2a5157b23b54?context=explore">hub.docker.com/layers/rocker/r-ver/4.2.0</a> as a <em>base</em> image and build the container on top of that image. This is typically used to set the operating system of the docker container, e.g.&nbsp;ubuntu, Fedora, etc. . In this particular case, Iâ€™m using the official docker container of <strong>R</strong> programming language version 4.2.0 as the base so that I donâ€™t have to install it myself.</p>
<p>The lines following the first line tell which commands to execute to set up the container. For example, in the second line, Iâ€™m first updating the virtual operating system of the docker container, and then in the third line, Iâ€™m installing some libraries to the operating system that will be needed for the R packages that I use. The details of how to set up a docker container are beyond the scope of this blog post, so Iâ€™ll skip that for the moment.</p>
<p>Once you finish setting up the dockerfile, now we are ready to build the container and <em>upload</em> it somewhere so that we can access it whenever we want.</p>
</section>
<section id="step-2-create-the-docker-container-and-push-it-to-dockerhub" class="level1">
<h1>Step 2: Create the docker container and push it to dockerhub</h1>
<p>Assuming that you are creating the docker container in a non-Linux environment, we will tell the docker that the container will be used in the Linux environment while we create the container.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> mycontainer:latest . <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> my.dockerfile  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--platform</span> linux/x86_64 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tee</span> build.log</span></code></pre></div>
</div>
<p>Here, <code>mycontainer:latest</code> gives the container a name and a tag to easily identify it. The tag is like a version of that container. The dot <code>.</code> following tells the docker that the docker file <code>-f my.dockerfile</code> is located at the current location where this command is executed. The parameter <code>--platform Linux/x86_64</code> tells docker that the container should be compatible with a Linux host. Once you execute the above command, it can take from minutes to hours to create the container, depending on what you asked the docker to install to your container.</p>
<p>Once the creation of the container is complete, we need to push it a dockerhub as a repository. First, create an account at <a href="https://hub.docker.com/">dockerhub</a>. Then create a repository at dockerhub on the website. You will push the container you created on your computer to the repo you created in docker hub. Then from your terminal, log into your account</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> login <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--username</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>dockerhub username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</div>
<p>Now you first need to tag the docker container in your computer to the repo in the dockerhub. List all docker images and copy <code>IMAGE ID</code> of that container. It should be a 12-character alphanumeric string, something like <code>76ad0cae35c3</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> image ls</span></code></pre></div>
</div>
<p>Once you find the <code>IMAGE ID</code> of your container, we tag it to the repo as</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> tag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>IMAGE ID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>dockerhub username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>repo name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</div>
<p>Now we are ready to push the container that is still stored in your computer to the repo at <code>&lt;dockerhub username&gt;/&lt;repo name&gt;</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> push <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>dockerhub username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>repo name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</div>
<p>It might take some time for the push to finish if this is your first time creating this container and it is a large container.</p>
</section>
<section id="step-3-run-the-docker-container-with-singularityapptainer" class="level1">
<h1>Step 3: Run the docker container with Singularity/Apptainer</h1>
<p>Having created the docker container and stored it in the dockerhub, we are ready to use with singularity. Log into the HPC cluster and make sure that the singularity/apptainer is installed already. We first make sure that the cache directories are created - otherwise, singularity will complain. Then we can directly run the docker container with singularity in the following way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$SINGULARITY_TMPDIR</span> </span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$APPTAINER_CACHEDIR</span></span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">singularity</span> run  docker://<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>dockerhub username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>repo name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>:latest</span></code></pre></div>
</div>
<p>Here, the word <code>docker</code> before <code>&lt;dockerhub username&gt;/&lt;repo name&gt;:latest</code> tells singularity to search for the repo in the dockerhub. With this, singularity downloads the docker container at <code>&lt;dockerhub username&gt;/&lt;repo name&gt;:latest</code> and runs it. Once it is done, you will be inside the container and start using the software that you have installed in that container.</p>
<p>However, typically, when we are running the docker container, we also would like to access the data is that in the host environment. As a result, we need to <em>bind</em> some of the directories in the host to a directory in the virtual operating system. <em>Binding</em> simply means that you make a directory in the host operating system accessible from within the container. To accomplish this we pass <code>--bind</code> parameter. The path before <code>:</code> indicates the directory in the host, and the path after <code>:</code> indicates the path inside the container.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">singularity</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bind</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>host path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>container path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> docker://<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>dockerhub username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>repo name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>:latest</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>hpc</category>
  <category>howto</category>
  <category>singularity</category>
  <category>docker</category>
  <guid>https://onurcanbektas.quarto.pub/home/posts/241201I1/index.html</guid>
  <pubDate>Sat, 30 Nov 2024 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
